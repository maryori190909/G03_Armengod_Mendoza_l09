package graph;

import graph.*;
import listlinked.*;
import java.util.*;
public class GraphAnalyzer <E> {
    private final GraphLink<E> grafo;

    public GraphAnalyzer(GraphLink<E> grafo) {
        this.grafo = grafo;
    }

    public int gradoNodo(E data) {
        Vertex<E> v = graph.listVertex.searchRef(new Vertex<>(data));
        return (v != null) ? v.getListAdj().size() : -1;
    }

    private boolean esSimetrico() {
        for (Node<Vertex<E>> n = graph.listVertex.getHead(); n != null; n = n.next) {
            Vertex<E> v = n.data;
            for (Node<Edge<E>> e = v.getListAdj().getHead(); e != null; e = e.next) {
                Vertex<E> destino = e.data.getRefDest();
                if (!destino.getListAdj().search(new Edge<>(v))) {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean esCamino() {
        if (!esSimetrico()) return false;
        int extremos = 0;
        for (Node<Vertex<E>> n = graph.listVertex.getHead(); n != null; n = n.next) {
            int grado = n.data.getListAdj().size();
            if (grado == 1) extremos++;
            else if (grado != 2) return false;
        }
        return extremos == 2;
    }

    public boolean esCiclo() {
        if (!esSimetrico()) return false;
        for (Node<Vertex<E>> n = graph.listVertex.getHead(); n != null; n = n.next) {
            if (n.data.getListAdj().size() != 2) return false;
        }
        return true;
    }
}

