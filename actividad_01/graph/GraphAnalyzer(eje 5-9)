package graph;

import listlinked.*;
import java.util.*;
public class GraphAnalyzer <E> {
    private final GraphLink<E> grafo;

    public GraphAnalyzer(GraphLink<E> grafo) {
        this.grafo = grafo;
    }

    public int gradoNodo(E data) {
        Vertex<E> v = grafo.listVertex.searchRef(new Vertex<>(data));
        return (v != null) ? v.getListAdj().size() : -1;
    }

    private boolean esSimetrico() {
        for (Node<Vertex<E>> n = grafo.listVertex.getHead(); n != null; n = n.next) {
            Vertex<E> v = n.data;
            for (Node<Edge<E>> e = v.getListAdj().getHead(); e != null; e = e.next) {
                Vertex<E> destino = e.data.getRefDest();
                if (!destino.getListAdj().search(new Edge<>(v))) {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean esCamino() {
        if (!esSimetrico()) return false;
        int extremos = 0;
        for (Node<Vertex<E>> n = grafo.listVertex.getHead(); n != null; n = n.next) {
            int grado = n.data.getListAdj().size();
            if (grado == 1) extremos++;
            else if (grado != 2) return false;
        }
        return extremos == 2;
    }

    public boolean esCiclo() {
        if (!esSimetrico()) return false;
        for (Node<Vertex<E>> n = grafo.listVertex.getHead(); n != null; n = n.next) {
            if (n.data.getListAdj().size() != 2) return false;
        }
        return true;
    }

    public boolean esRueda() {
        if (!esSimetrico()) return false;
        int n = grafo.listVertex.size();
        if (n < 4) return false;
        int centro = 0;
        int periferia = 0;
        for (Node<Vertex<E>> v = grafo.listVertex.getHead(); v != null; v = v.next) {
            int grado = v.data.getListAdj().size();
            if (grado == n - 1) centro++;
            else if (grado == 3) periferia++;
            else return false;
        }
        return centro == 1 && periferia == n - 1;
    }

    public boolean esCompleto() {
        if (!esSimetrico()) return false;
        int n = grafo.listVertex.size();
        for (Node<Vertex<E>> v = grafo.listVertex.getHead(); v != null; v = v.next) {
            if (v.data.getListAdj().size() != n - 1) return false;
        }
        return true;
    }

    public void representacionFormal() {
        System.out.println("Vertices:");
        for (Node<Vertex<E>> n = grafo.listVertex.getHead(); n != null; n = n.next) {
            System.out.print(n.data.getData() + " ");
        }
        System.out.println("\nAristas:");
        Set<String> set = new HashSet<>();
        for (Node<Vertex<E>> n = grafo.listVertex.getHead(); n != null; n = n.next) {
            Vertex<E> v = n.data;
            Node<Edge<E>> e = v.getListAdj().getHead();
            while (e != null) {
                String id = v.getData() + "-" + e.data.getRefDest().getData();
                String rev = e.data.getRefDest().getData() + "-" + v.getData();
                if (!set.contains(rev)) {
                    System.out.println(id);
                    set.add(id);
                }
                e = e.next;
            }
        }
    }

    public void representacionListaAdyacencia() {
        for (Node<Vertex<E>> n = grafo.listVertex.getHead(); n != null; n = n.next) {
            System.out.print(n.data.getData() + ": ");
            Node<Edge<E>> e = n.data.getListAdj().getHead();
            while (e != null) {
                System.out.print(e.data.getRefDest().getData() + " ");
                e = e.next;
            }
            System.out.println();
        }
    }

    public void representacionMatrizAdyacencia() {
        List<E> vertices = new ArrayList<>();
        for (Node<Vertex<E>> n = grafo.listVertex.getHead(); n != null; n = n.next) {
            vertices.add(n.data.getData());
        }
        int n = vertices.size();
        int[][] matriz = new int[n][n];

        for (int i = 0; i < n; i++) {
            Vertex<E> v = grafo.listVertex.searchRef(new Vertex<>(vertices.get(i)));
            Node<Edge<E>> e = v.getListAdj().getHead();
            while (e != null) {
                int j = vertices.indexOf(e.data.getRefDest().getData());
                matriz[i][j] = 1;
                e = e.next;
            }
        }

        System.out.print("    ");
        for (E v : vertices) System.out.print(v + " ");
        System.out.println();
        for (int i = 0; i < n; i++) {
            System.out.print(vertices.get(i) + " | ");
            for (int j = 0; j < n; j++) {
                System.out.print(matriz[i][j] + " ");
            }
            System.out.println();
        }
    }


}
