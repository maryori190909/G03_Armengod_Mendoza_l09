package graph;

import java.util.*;
public class GraphListEdge <V, E> {

    ArrayList<VertexObj<V, E>> secVertex;
    ArrayList<EdgeObj<V, E>> secEdge;

    public GraphListEdge() {
        this.secVertex = new ArrayList<>();
        this.secEdge = new ArrayList<>();
    }

    public void insertVertex(V v) {
        if (!searchVertex(v)) {
            secVertex.add(new VertexObj<>(v, secVertex.size()));
        }
    }

    public void insertEdge(V v, V z) {
        VertexObj<V, E> vert1 = getVertex(v);
        VertexObj<V, E> vert2 = getVertex(z);

        if (vert1 == null) {
            vert1 = new VertexObj<>(v, secVertex.size());
            secVertex.add(vert1);
        }

        if (vert2 == null) {
            vert2 = new VertexObj<>(z, secVertex.size());
            secVertex.add(vert2);
        }

        if (!searchEdge(v, z)) {
            secEdge.add(new EdgeObj<>(vert1, vert2, null, secEdge.size()));
        }
    }

    public boolean searchVertex(V v) {
        for (VertexObj<V, E> vertex : secVertex) {
            if (vertex.getInfo().equals(v)) {
                return true;
            }
        }
        return false;
    }

    public boolean searchEdge(V v, V z) {
        for (EdgeObj<V, E> edge : secEdge) {
            if ((edge.getEndVertex1().getInfo().equals(v) && edge.getEndVertex2().getInfo().equals(z)) ||
                (edge.getEndVertex1().getInfo().equals(z) && edge.getEndVertex2().getInfo().equals(v))) {
                return true;
            }
        }
        return false;
    }

    public VertexObj<V, E> getVertex(V v) {
        for (VertexObj<V, E> vertex : secVertex) {
            if (vertex.getInfo().equals(v)) {
                return vertex;
            }
        }
        return null;
    }

    public void bfs(V start) {
        Set<V> visit = new HashSet<>();
        Queue<V> queue = new LinkedList<>();

        queue.add(start);
        visit.add(start);

        while (!queue.isEmpty()) {
            V actual = queue.poll();
            System.out.print(actual + " ");

            for (EdgeObj<V, E> edge : secEdge) {
                V vecino = null;
                if (edge.getEndVertex1().getInfo().equals(actual)) {
                    vecino = edge.getEndVertex2().getInfo();
                } else if (edge.getEndVertex2().getInfo().equals(actual)) {
                    vecino = edge.getEndVertex1().getInfo();
                }

                if (vecino != null && !visit.contains(vecino)) {
                    visit.add(vecino);
                    queue.add(vecino);
                }
            }
        }
        System.out.println();
    }

}
